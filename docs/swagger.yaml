basePath: /
definitions:
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.TaskRequest:
    properties:
      assignee_id:
        type: integer
      deadline:
        type: string
      description:
        type: string
      status:
        enum:
        - todo
        - in_progress
        - done
        type: string
      title:
        type: string
    required:
    - description
    - title
    type: object
  entity.Project:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      user_id:
        type: integer
    type: object
  entity.ProjectMember:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      projectId:
        type: integer
      role:
        type: string
      userId:
        type: integer
    type: object
host: localhost:8888
info:
  contact: {}
  description: simple api project
  title: managment api
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT in a cookie and header
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content - login successful
          schema:
            type: string
        "400":
          description: Bad Request - validation error
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a user
      parameters:
      - description: register credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created - register successful
          schema:
            type: string
        "400":
          description: Bad Request - validation error
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: User Register
      tags:
      - auth
  /projects:
    get:
      description: Returns a list of projects owned by the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Project'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all projects for the authenticated user
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: Create a new project for the authenticated user
      produces:
      - application/json
      responses:
        "201":
          description: Project created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - projects
  /projects/{id}:
    delete:
      description: Delete a project owned by the user
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a project
      tags:
      - projects
    get:
      description: Retrieves a project by its ID if the user is the owner
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Project'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a project by ID
      tags:
      - projects
    put:
      consumes:
      - application/json
      description: Update a project owned by the user
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a project
      tags:
      - projects
  /projects/{id}/members:
    get:
      description: Returns a list of users assigned to a given project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.ProjectMember'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get all members of a project
      tags:
      - project-members
    post:
      consumes:
      - application/json
      description: Adds a user to the project with a given role
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Member added
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Add a member to a project
      tags:
      - project-members
  /projects/{id}/members/{userId}:
    delete:
      description: Deletes a user from a project if requester has access
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: User ID to remove
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Remove a user from a project
      tags:
      - project-members
  /projects/{projectId}/tasks:
    get:
      description: Returns all tasks for a given project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get tasks by project ID
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a task under a specific project
      parameters:
      - description: Project ID
        in: path
        name: projectId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - tasks
  /tasks/{taskId}:
    delete:
      description: Delete a task by task ID
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a task
      tags:
      - tasks
    get:
      description: Returns a single task by its ID
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get task by ID
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Update task details by task ID
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/dto.TaskRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update an existing task
      tags:
      - tasks
swagger: "2.0"
