// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "github.com/patorochr/project-management-api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: task
func (_m *TaskRepository) Create(task *entity.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *TaskRepository) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskById provides a mock function with given fields: id
func (_m *TaskRepository) GetTaskById(id int) (*entity.Task, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskById")
	}

	var r0 *entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByProjectId provides a mock function with given fields: projectId
func (_m *TaskRepository) GetTaskByProjectId(projectId int) (*[]entity.Task, error) {
	ret := _m.Called(projectId)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByProjectId")
	}

	var r0 *[]entity.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]entity.Task, error)); ok {
		return rf(projectId)
	}
	if rf, ok := ret.Get(0).(func(int) *[]entity.Task); ok {
		r0 = rf(projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsItOwner provides a mock function with given fields: ownerId, taskId
func (_m *TaskRepository) IsItOwner(ownerId int, taskId int) error {
	ret := _m.Called(ownerId, taskId)

	if len(ret) == 0 {
		panic("no return value specified for IsItOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(ownerId, taskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: task, id
func (_m *TaskRepository) Update(task *entity.Task, id int) error {
	ret := _m.Called(task, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Task, int) error); ok {
		r0 = rf(task, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
