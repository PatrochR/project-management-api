// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "github.com/patorochr/project-management-api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// ProjectMemberRepostiroy is an autogenerated mock type for the ProjectMemberRepostiroy type
type ProjectMemberRepostiroy struct {
	mock.Mock
}

// CanUseProject provides a mock function with given fields: projectId, userId
func (_m *ProjectMemberRepostiroy) CanUseProject(projectId int, userId int) error {
	ret := _m.Called(projectId, userId)

	if len(ret) == 0 {
		panic("no return value specified for CanUseProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(projectId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeRole provides a mock function with given fields: role, id
func (_m *ProjectMemberRepostiroy) ChangeRole(role string, id int) error {
	ret := _m.Called(role, id)

	if len(ret) == 0 {
		panic("no return value specified for ChangeRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(role, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: projectMember
func (_m *ProjectMemberRepostiroy) Create(projectMember *entity.ProjectMember) error {
	ret := _m.Called(projectMember)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.ProjectMember) error); ok {
		r0 = rf(projectMember)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: userId, projectId
func (_m *ProjectMemberRepostiroy) Delete(userId int, projectId int) error {
	ret := _m.Called(userId, projectId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(userId, projectId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByProjectId provides a mock function with given fields: projectId
func (_m *ProjectMemberRepostiroy) GetByProjectId(projectId int) (*[]entity.ProjectMember, error) {
	ret := _m.Called(projectId)

	if len(ret) == 0 {
		panic("no return value specified for GetByProjectId")
	}

	var r0 *[]entity.ProjectMember
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]entity.ProjectMember, error)); ok {
		return rf(projectId)
	}
	if rf, ok := ret.Get(0).(func(int) *[]entity.ProjectMember); ok {
		r0 = rf(projectId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.ProjectMember)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(projectId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProjectMemberRepostiroy creates a new instance of ProjectMemberRepostiroy. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectMemberRepostiroy(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectMemberRepostiroy {
	mock := &ProjectMemberRepostiroy{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
