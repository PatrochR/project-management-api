// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	entity "github.com/patorochr/project-management-api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// ProjectRepository is an autogenerated mock type for the ProjectRepository type
type ProjectRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: project
func (_m *ProjectRepository) Create(project *entity.Project) (*int, error) {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *int
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Project) (*int, error)); ok {
		return rf(project)
	}
	if rf, ok := ret.Get(0).(func(*entity.Project) *int); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.Project) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ProjectRepository) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: id
func (_m *ProjectRepository) GetById(id int) (*entity.Project, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *entity.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.Project, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByOwnerId provides a mock function with given fields: ownerId
func (_m *ProjectRepository) GetByOwnerId(ownerId int) (*[]entity.Project, error) {
	ret := _m.Called(ownerId)

	if len(ret) == 0 {
		panic("no return value specified for GetByOwnerId")
	}

	var r0 *[]entity.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]entity.Project, error)); ok {
		return rf(ownerId)
	}
	if rf, ok := ret.Get(0).(func(int) *[]entity.Project); ok {
		r0 = rf(ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsItOwner provides a mock function with given fields: ownerId, projectId
func (_m *ProjectRepository) IsItOwner(ownerId int, projectId int) error {
	ret := _m.Called(ownerId, projectId)

	if len(ret) == 0 {
		panic("no return value specified for IsItOwner")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(ownerId, projectId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: project, id
func (_m *ProjectRepository) Update(project *entity.Project, id int) error {
	ret := _m.Called(project, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Project, int) error); ok {
		r0 = rf(project, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProjectRepository creates a new instance of ProjectRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectRepository {
	mock := &ProjectRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
